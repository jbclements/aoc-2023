#lang rhombus

import:
  "../somelibs.rhm" as libs
  lib("racket/base.rkt"):
    rename #{regexp-match} as regexp_match
  lib("racket/file.rkt"):
    rename #{file->lines} as file_to_lines


fun tilde_v(x):
  base.format("~v",x)

def test_string:
  #{"467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598.."}

def non_symbols:
  for List (ch : ".1234567890"):
    ch

fun member(v,l :: List):
  for values(accum = #false):
    each item: l
    break_when accum == #true
    accum || (item == v)

check member(3,[4,3,6]) ~is #true
check member(5,[4,3,5]) ~is #true
check member(6,[4,3,5]) ~is #false


fun is_symbol(ch):
  !member(ch,non_symbols)

check is_symbol(#{#\3}) ~is #false
check is_symbol(#{#\@}) ~is #true


// given a line, return a list of the positions in which symbols occur
fun line_symbol_locs(line_num :: Number, l :: String):
  for List:
    each:
      ch: l
      i: 0..
    keep_when is_symbol(ch)
    [line_num,i]

check line_symbol_locs(8,"..4$.*....") ~is [[8,3],[8,5]]

fun symbol_locs(l):
  for values(accum = []):
    each:
      line: l
      linenum: 0..
    line_symbol_locs(linenum,line) ++ accum


symbol_locs(libs.newline_split(test_string))


/*
fun parse_line(s :: ReadableString.to_string):
  match base.regexp_match(line_rx,s)
  | [_,numstr,restofline]: [numstr.to_number(),List.map(libs.semicolon_split(restofline),
                                                        draw_split)]
  | other: error("parse_line","unexpected line: "++ tilde_v(s))

// a parsed draw is a Map("red"||"green"||"blue",Integer)
           
fun draw_split(draw :: ReadableString.to_string):
  Map(& libs.comma_split(draw).map(color_parse))

fun color_parse(s :: String):
  match base.regexp_match(#{#px" *([[:digit:]]+) (red|green|blue)"},s)
  | [_,count,color]: [color.to_string(),count.to_number()]

check draw_split("11 red, 5 blue, 4 green") ~is {"red":11,"blue":5,"green":4}
check color_parse("5 blue") ~is ["blue",5]

def red_max = 12
def green_max = 13
def blue_max = 14

fun check_parsed_draw(pd):
  pd.get("red",0) <= red_max
    && pd.get("green",0) <= green_max
    && pd.get("blue",0) <= blue_max

check check_parsed_draw({"red":3,"green":4,"blue":9}) ~is #true
  
check check_parsed_draw({"red":12,"green":4,"blue":9}) ~is #true
check check_parsed_draw({"red":13,"green":4,"blue":9}) ~is #false
check check_parsed_draw({"red":3,"green":13,"blue":9}) ~is #true
check check_parsed_draw({"red":3,"green":14,"blue":9}) ~is #false
check check_parsed_draw({"red":3,"green":4,"blue":14}) ~is #true
check check_parsed_draw({"red":3,"green":4,"blue":15}) ~is #false

// a game is a list containing a number and a list of parsed_draw's
fun check_game([_,draws]):
  libs.andmap(draws,check_parsed_draw)


def input_lines = file.file_to_lines("./input")

parse_line(input_lines.first)

def parsed_lines = List.map(input_lines,parse_line)
def passing_games = libs.filter(parsed_lines,check_game)

fun sum(l :: List):
  for values(sum = 0):
    each n: l
    sum + n

check sum([4,9,1]) ~is 14

sum(passing_games.map(fun ([n,_]):n))

fun max(a,b):
  cond
  | a>b : a
  | ~else: b
    
fun draw_max(d1,d2):
  for Map (k: ["red","green","blue"]):
    values(k,max(d1.get(k,0),d2.get(k,0)))
         

fun game_power([n,draws]):
  def max_draw:
    for values(accum = {"red":0,"green":0,"blue":0}):
      each d: draws
      draw_max(accum,d)
  max_draw["red"] * max_draw["green"] * max_draw["blue"]

sum(parsed_lines.map(game_power))

/*
// a set containing the digits
def digits:
  for Set (ch : "0123456789"):
    ch


// return the last element of a list
fun last(l :: List):
  match l
  | []: error("no last of an empty list")
  | [a]: a
//  | [_,b...]: last(b)
  | List.cons(a,b): last(b)

check last([3,4,5]) ~is 5
check last([]) ~raises "no last of an empty list"
                         
// return true when called with a digit
fun is_digit(d :: Char):
  digits[d]

def zero_code = base.#{char->integer}(#{#\0})

// given a numeric digit, return the corresponding natural number
fun digit_to_num(d):
  def code = base.#{char->integer}(d) - zero_code
  cond
  | ((0 <= code) && (code <= 9)):
      code
  | ~else: error("not a digit: "++to_string(d))

  

check digit_to_num(#{#\3}) ~is 3
check digit_to_num(#{#\space}) ~raises "not a digit"

fun parse_line(l):
  def line_digits:
    for List (ch: l):
      keep_when is_digit(ch)
      ch
  [line_digits.first,last(line_digits)]

fun process_line([a,b]):
  10*digit_to_num(a) + digit_to_num(b)

for List (l: newline_split(test_string)):
  process_line(parse_line(l))
               


for values(sum=0):
  each l: input_lines
  sum + process_line(parse_line(l))

fun substr_to_num(s :: ReadableString.to_string):
  match s
  | "one" || "1" : 1
  | "two" || "2" : 2
  | "three" || "3" : 3
  | "four" || "4" : 4
  | "five" || "5" : 5
  | "six" || "6" : 6
  | "seven" || "7" : 7
  | "eight" || "8" : 8
  | "nine" || "9" : 9
  | "zero" || "0" : 0
  | other: error("substr_to_num","unexpected input: "++tilde_v(s))


check substr_to_num("eight") ~is 8
check substr_to_num("4") ~is 4

def digits_rx:
  #{#px"(one|two|three|four|five|six|seven|eight|nine|ten|0|1|2|3|4|5|6|7|8|9)"}

def reverse_digits_rx:
  #{#px"(9|8|7|6|5|4|3|2|1|0|net|enin|thgie|neves|xis|evif|ruof|eerht|owt|eno)"}
  

check base.#{regexp-match}(digits_rx,"abdone4") ~is_now ["one","one"]
check base.#{regexp-match}(digits_rx,"abdon2e4") ~is_now ["2","2"]

fun first_digit(l):
  match base.#{regexp-match}(digits_rx,l)
  | [_,s]: substr_to_num(s)
  | other: error("unexpected value:" ++ tilde_v(other))

check first_digit("abontwo3") ~is 2

fun last_digit(l):
  match base.#{regexp-match}(reverse_digits_rx,string_reverse(l))
  | [_,s]: substr_to_num(string_reverse(s))
  | #false: error("last_digit","no match on line "++tilde_v(l))

check last_digit("oneight") ~is 8

fun process_line_part_2(l):
  def fd = first_digit(l)
  def ld = last_digit(l)
  10*fd + ld


check process_line_part_2("oneight") ~is 18

check process_line_part_2("o2neight") ~is 28
check process_line_part_2("o2neigh9t") ~is 29


for values(sum=0):
  each l: input_lines
  sum + process_line_part_2(l)
*/
*/