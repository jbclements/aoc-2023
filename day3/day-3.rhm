#lang rhombus

import:
  "../somelibs.rhm" as libs
  lib("racket/base.rkt"):
    rename #{regexp-match} as regexp_match
  lib("racket/file.rkt"):
    rename #{file->lines} as file_to_lines
  "../reducers.rhm" as red


fun tilde_v(x):
  base.format("~v",x)

def sample_string:
  #{"467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598.."}

def digits = "1234567890"                              
def non_symbols: "."++digits

operator (a <<< b):
  (fun (x):a(b(x)))

fun is_symbol(ch):
  !libs.has_element(non_symbols,ch)

fun is_digit(ch):
  libs.has_element("1234567890",ch)

fun is_star(ch :: Char):
  ch == #{#\*}
  
check is_symbol(#{#\3}) ~is #false
check is_symbol(#{#\@}) ~is #true
check is_digit(#{#\4}) ~is #true
check is_digit(#{#\.}) ~is #false

fun list_to_array(l :: List):
  Array(& l)

// is the sequence empty?
fun empty(s :: Sequence):
  for values(empty=#true):
    each item: s
    final_when #true
    #false

check empty([]) ~is #true
check empty([1]) ~is #false
check empty("") ~is #true
check empty("a") ~is #false

fun last(s :: Sequence):
  def values(last_val,seen_one):
    for values(l=#false,seen_one=#false):
      each item: s
      values(item,#true)
  cond
  | seen_one: last_val
  | ~else: error("last","given empty_sequence")

check last("abc") ~is #{#\c}
check last([3,4,5]) ~is 5

// actually let's just do this with a 2d array
fun string_to_char_array(s :: String):
  def lines = libs.newline_split(s).map(String.to_string)
  lines_to_char_array(lines)

fun lines_to_char_array(lines :: List):
  def lines2 = libs.filter(lines,fun (s :: String): s!="")
  list_to_array(lines2.map(list_to_array <<< base.#{string->list}))
  

def test_char_array = string_to_char_array(sample_string)

check string_to_char_array("ab\ncd\nef") ~is_now Array(Array(#{#\a},#{#\b}),
                                                       Array(#{#\c},#{#\d}),
                                                       Array(#{#\e},#{#\f}))

// scan a line for sequences of digits
fun find_nums(l :: String):
  def zipped:
    for List:
      each:
        ch: l
        i: 0..
      [ch,i]
  def digit_seqs:
    libs
      .filter(libs
                .split_around(zipped,fun ([ch,_]): !is_digit(ch)),(fun (l): l != []))
  for List (s: digit_seqs):
    [s[0][1],last(s)[1]+1]

check find_nums("..35..633.") ~is [[2,4],[6,9]]

// given a line number and a begin/end (e.g. [4,6] for chars 4 & 5), return
// #true if there's a symbol adjacent to a cell in the interval
fun scan_for_symbols(linenum,[begin,end],cell_array):
  //println("scanning on line: "++tilde_v(linenum))
  def linewidth = cell_array[0].length()
  def height = cell_array.length()
  fun legal_line(i):
    i >= 0 && i < height
  // checks whether j is valid, and the cell contains a symbol
  fun contains_symbol(i,j):
    j >= 0 && j < linewidth && is_symbol(cell_array[i][j])
  // return #true if there is a symbol in the given range
  fun range_check(row,mincol,maxcol):
    for red.Or:
      each j: mincol..maxcol
      contains_symbol(row,j)
  fun line_above_check():
    legal_line(linenum-1) && range_check(linenum-1,begin-1,end+1)
  fun left_right_check():
    legal_line(linenum)
      && (contains_symbol(linenum,begin-1) || contains_symbol(linenum,end))
  fun line_below_check():
    legal_line(linenum+1) && range_check(linenum+1,begin-1,end+1)
  ;; line_above_check
  (line_above_check()
     || left_right_check()
     || line_below_check())

block:
  def test_array = string_to_char_array("..@..")

  // below right, doesn't quite touch
  check scan_for_symbols(1,[4,5],test_array) ~is #false
  // now barely touches
  check scan_for_symbols(1,[3,5],test_array) ~is #true
  // move rect left gradually...
  check scan_for_symbols(1,[2,4],test_array) ~is #true
  check scan_for_symbols(1,[1,3],test_array) ~is #true
  check scan_for_symbols(1,[0,2],test_array) ~is #true
  check scan_for_symbols(1,[-1,1],test_array) ~is #false
  // middle row
  check scan_for_symbols(0,[4,6],test_array) ~is #false
  check scan_for_symbols(0,[3,5],test_array) ~is #true
  check scan_for_symbols(0,[2,4],test_array) ~is #false
  check scan_for_symbols(0,[1,3],test_array) ~is #false
  check scan_for_symbols(0,[0,2],test_array) ~is #true
  check scan_for_symbols(0,[-1,1],test_array) ~is #false
  // line_above_check
  check scan_for_symbols(-1,[4,6],test_array) ~is #false
  check scan_for_symbols(-1,[3,5],test_array) ~is #true
  check scan_for_symbols(-1,[2,4],test_array) ~is #true
  check scan_for_symbols(-1,[1,3],test_array) ~is #true
  check scan_for_symbols(-1,[0,2],test_array) ~is #true
  check scan_for_symbols(-1,[-1,1],test_array) ~is #false


// given a line number and a begin/end (e.g. [4,6] for chars 4 & 5), return
// a list of the locations of the adjacent stars
fun scan_for_stars(linenum,[begin,end],cell_array):
  def linewidth = cell_array[0].length()
  def height = cell_array.length()
  fun legal_line(i):
    i >= 0 && i < height
  // checks whether j is valid, and the cell contains a symbol
  fun star_pos(i,j):
    j >= 0 && j < linewidth && is_star(cell_array[i][j]) && [i,j]
  // return #true if there is a symbol in the given range
  fun range_check(row,mincol,maxcol):
    for red.FilterList:
      each j: mincol..maxcol
      star_pos(row,j)
  fun line_above_check():
    cond
    | legal_line(linenum-1): range_check(linenum-1,begin-1,end+1)
    | ~else: []
  fun left_right_check():
    cond
    | legal_line(linenum): for red.FilterList:
                             each [i,j]: [[linenum,begin-1],[linenum,end]]
                             star_pos(i,j)
    | ~else: []
  fun line_below_check():
    cond
    | legal_line(linenum+1): range_check(linenum+1,begin-1,end+1)
    | ~else: []
  ;; line_above_check
  (line_above_check()
     ++ left_right_check()
     ++ line_below_check())

block:
  def test_array = string_to_char_array("*.*/.")

  // below right, doesn't quite touch
  check scan_for_stars(1,[4,6],test_array) ~is []
  // now barely touches
  check scan_for_stars(1,[3,5],test_array) ~is [[0,2]]
  // move rect left gradually...
  check scan_for_stars(1,[2,4],test_array) ~is [[0,2]]
  check scan_for_stars(1,[1,3],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(1,[0,2],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(1,[-1,1],test_array) ~is [[0,0]]
  // middle row
  check scan_for_stars(0,[4,6],test_array) ~is []
  check scan_for_stars(0,[3,5],test_array) ~is [[0,2]]
  check scan_for_stars(0,[2,4],test_array) ~is []
  check scan_for_stars(0,[1,3],test_array) ~is [[0,0]]
  check scan_for_stars(0,[0,2],test_array) ~is [[0,2]]
  check scan_for_stars(0,[-1,1],test_array) ~is []
  // line_above_check
  check scan_for_stars(-1,[4,6],test_array) ~is []
  check scan_for_stars(-1,[3,5],test_array) ~is [[0,2]]
  check scan_for_stars(-1,[2,4],test_array) ~is [[0,2]]
  check scan_for_stars(-1,[1,3],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(-1,[0,2],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(-1,[-1,1],test_array) ~is [[0,0]]

fun group_by(l,f):
  for values(table={}):
    each item: l
    table ++ {f(item):item}

// given lines and char_array, return a list of 3-tuples, where each
// one contains the line number and character range of a number and a
// 2-tuple containing the position of an adjacent star
fun nums_next_to_stars(lines, char_array):
  def line_star_pairs:
    for List:
      each:
        line: lines
        rowidx: 0..
      fun star_locs(range):
        scan_for_stars(rowidx, range, char_array)
      fun range_to_star_pairs(range):
        for List (pos: star_locs(range)):
          [rowidx,range,pos]
      def num_ranges = find_nums(line)
      List.append(& num_ranges.map(range_to_star_pairs))
  List.append(& line_star_pairs)

// given the num_star_pairs, group them by the location of the
// adjacent star, and for sets of length 2, multiply the 2 numbers together
fun gear_ratios(num_star_pairs,lines, char_array):
  fun extract_num(row,col_begin,col_end):
    lines[row].substring(col_begin, col_end).to_int()
  def set_sets = libs.group_by(num_star_pairs,fun ([_,_,x]): x)
  for red.Sum (possible_gear: set_sets.values()):
    match possible_gear.to_list()
    | [[i1, [j1b, j1e], _], [i2, [j2b, j2e], _]]:
        extract_num(i1,j1b,j1e) * extract_num(i2,j2b,j2e)
    | ~else: 0

block:
  def sample_lines = libs.newline_split(sample_string).map(String.to_string)
  def char_array = lines_to_char_array(sample_lines)
  def np = nums_next_to_stars(sample_lines, char_array)
  check gear_ratios(np,sample_lines, char_array) ~is 467835


fun run_puzzle(s :: String):
  def lines = libs.newline_split(s).map(String.to_string)

  def char_array = string_to_char_array(s)

  def nums_next_to_symbols:
    for List:
      each:
        line: lines
        rowidx: 0..
      def num_ranges = find_nums(line)
      fun check_num(range):
        scan_for_symbols(rowidx,range,char_array)
      def nums_next_to_symbols = libs.filter(num_ranges,check_num)
      for List ([b,e]: nums_next_to_symbols):
        line.substring(b,e).to_int()

  for red.Sum (line: nums_next_to_symbols):
    for red.Sum (n: line):
      n

run_puzzle(sample_string)

def input_string = file.#{file->string}("./input").to_string()

run_puzzle(input_string)

// part 2
block:
  def input_lines = libs.newline_split(input_string).map(String.to_string)
  def input_char_array = lines_to_char_array(input_lines)
  def np = nums_next_to_stars(input_lines, input_char_array)
  gear_ratios(np,input_lines, input_char_array)

/*
// given a line, return a list of the positions in which symbols occur
fun line_symbol_locs(line_num :: Number, l :: String):
  for List:
    each:
      ch: l
      i: 0..
    keep_when is_symbol(ch)
    [line_num,i]

check line_symbol_locs(8,"..4$.*....") ~is [[8,3],[8,5]]

fun symbol_locs(l):
  for values(accum = []):
    each:
      line: l
      linenum: 0..
    line_symbol_locs(linenum,line) ++ accum


symbol_locs(libs.newline_split(test_string))
*/

/*
fun parse_line(s :: ReadableString.to_string):
  match base.regexp_match(line_rx,s)
  | [_,numstr,restofline]: [numstr.to_number(),List.map(libs.semicolon_split(restofline),
                                                        draw_split)]
  | other: error("parse_line","unexpected line: "++ tilde_v(s))

// a parsed draw is a Map("red"||"green"||"blue",Integer)
           
fun draw_split(draw :: ReadableString.to_string):
  Map(& libs.comma_split(draw).map(color_parse))

fun color_parse(s :: String):
  match base.regexp_match(#{#px" *([[:digit:]]+) (red|green|blue)"},s)
  | [_,count,color]: [color.to_string(),count.to_number()]

check draw_split("11 red, 5 blue, 4 green") ~is {"red":11,"blue":5,"green":4}
check color_parse("5 blue") ~is ["blue",5]

def red_max = 12
def green_max = 13
def blue_max = 14

fun check_parsed_draw(pd):
  pd.get("red",0) <= red_max
    && pd.get("green",0) <= green_max
    && pd.get("blue",0) <= blue_max

check check_parsed_draw({"red":3,"green":4,"blue":9}) ~is #true
  
check check_parsed_draw({"red":12,"green":4,"blue":9}) ~is #true
check check_parsed_draw({"red":13,"green":4,"blue":9}) ~is #false
check check_parsed_draw({"red":3,"green":13,"blue":9}) ~is #true
check check_parsed_draw({"red":3,"green":14,"blue":9}) ~is #false
check check_parsed_draw({"red":3,"green":4,"blue":14}) ~is #true
check check_parsed_draw({"red":3,"green":4,"blue":15}) ~is #false

// a game is a list containing a number and a list of parsed_draw's
fun check_game([_,draws]):
  libs.andmap(draws,check_parsed_draw)


def input_lines = file.file_to_lines("./input")

parse_line(input_lines.first)

def parsed_lines = List.map(input_lines,parse_line)
def passing_games = libs.filter(parsed_lines,check_game)

fun sum(l :: List):
  for values(sum = 0):
    each n: l
    sum + n

check sum([4,9,1]) ~is 14

sum(passing_games.map(fun ([n,_]):n))

fun max(a,b):
  cond
  | a>b : a
  | ~else: b
    
fun draw_max(d1,d2):
  for Map (k: ["red","green","blue"]):
    values(k,max(d1.get(k,0),d2.get(k,0)))
         

fun game_power([n,draws]):
  def max_draw:
    for values(accum = {"red":0,"green":0,"blue":0}):
      each d: draws
      draw_max(accum,d)
  max_draw["red"] * max_draw["green"] * max_draw["blue"]

sum(parsed_lines.map(game_power))

/*
// a set containing the digits
def digits:
  for Set (ch : "0123456789"):
    ch


// return the last element of a list
fun last(l :: List):
  match l
  | []: error("no last of an empty list")
  | [a]: a
//  | [_,b...]: last(b)
  | List.cons(a,b): last(b)

check last([3,4,5]) ~is 5
check last([]) ~raises "no last of an empty list"
                         
// return true when called with a digit
fun is_digit(d :: Char):
  digits[d]

def zero_code = base.#{char->integer}(#{#\0})

// given a numeric digit, return the corresponding natural number
fun digit_to_num(d):
  def code = base.#{char->integer}(d) - zero_code
  cond
  | ((0 <= code) && (code <= 9)):
      code
  | ~else: error("not a digit: "++to_string(d))

  

check digit_to_num(#{#\3}) ~is 3
check digit_to_num(#{#\space}) ~raises "not a digit"

fun parse_line(l):
  def line_digits:
    for List (ch: l):
      keep_when is_digit(ch)
      ch
  [line_digits.first,last(line_digits)]

fun process_line([a,b]):
  10*digit_to_num(a) + digit_to_num(b)

for List (l: newline_split(test_string)):
  process_line(parse_line(l))
               


for values(sum=0):
  each l: input_lines
  sum + process_line(parse_line(l))

fun substr_to_num(s :: ReadableString.to_string):
  match s
  | "one" || "1" : 1
  | "two" || "2" : 2
  | "three" || "3" : 3
  | "four" || "4" : 4
  | "five" || "5" : 5
  | "six" || "6" : 6
  | "seven" || "7" : 7
  | "eight" || "8" : 8
  | "nine" || "9" : 9
  | "zero" || "0" : 0
  | other: error("substr_to_num","unexpected input: "++tilde_v(s))


check substr_to_num("eight") ~is 8
check substr_to_num("4") ~is 4

def digits_rx:
  #{#px"(one|two|three|four|five|six|seven|eight|nine|ten|0|1|2|3|4|5|6|7|8|9)"}

def reverse_digits_rx:
  #{#px"(9|8|7|6|5|4|3|2|1|0|net|enin|thgie|neves|xis|evif|ruof|eerht|owt|eno)"}
  

check base.#{regexp-match}(digits_rx,"abdone4") ~is_now ["one","one"]
check base.#{regexp-match}(digits_rx,"abdon2e4") ~is_now ["2","2"]

fun first_digit(l):
  match base.#{regexp-match}(digits_rx,l)
  | [_,s]: substr_to_num(s)
  | other: error("unexpected value:" ++ tilde_v(other))

check first_digit("abontwo3") ~is 2

fun last_digit(l):
  match base.#{regexp-match}(reverse_digits_rx,string_reverse(l))
  | [_,s]: substr_to_num(string_reverse(s))
  | #false: error("last_digit","no match on line "++tilde_v(l))

check last_digit("oneight") ~is 8

fun process_line_part_2(l):
  def fd = first_digit(l)
  def ld = last_digit(l)
  10*fd + ld


check process_line_part_2("oneight") ~is 18

check process_line_part_2("o2neight") ~is 28
check process_line_part_2("o2neigh9t") ~is 29


for values(sum=0):
  each l: input_lines
  sum + process_line_part_2(l)
*/
*/