#lang rhombus

import:
  lib("racket/base.rkt")
  "reducers.rhm" as red

export:
  filter
  andmap
  char_split
  newline_split
  comma_split
  semicolon_split
  split_around
  has_element
  group_by
  empty
  last
  take
  findf
  foldl

// given a sequence and a function and a seed, do a left fold. Function libs.takes new
// element first
fun foldl(l :: Sequence, f, seed):
  for values(result=seed):
    each item: l
    f(item,result)

check foldl([3,4,5],fun(x,y):2*x+y,1) ~is 25


// given a sequence and a function, return the first element of the
// sequence that satisfies `f`, or #false if none of them does
fun findf(l :: Sequence, f):
  def values(found,winner):
    for values(found=#false,winner=#false):
      each item : l
      break_when found
      values(f(item),item)
  found && winner

check findf([3,4,5,0],
            fun (x):
              match x
              | 3: #true
              | 0: error("explode!")
              | ~else: #false) ~is 3


// note.. might wind up producing a shorter list, if you run out!
fun take(l :: Sequence, n :: Int):
  for List:
    each:
      item: l
      i: 0..n
    item

check take([8,2,12,4],2) ~is [8,2]


// whoa, filter isn't built-in?
fun | filter([],_): []
    | filter(List.cons(fst,rst),pred):
        if pred(fst)
        | List.cons(fst,filter(rst,pred))
        | filter(rst,pred)
        


check filter([1,2,3,4],(fun (x):x>2)) ~is [3,4]

// whoa, andmap neither?
fun | andmap([],pred): []
    | andmap(List.cons(fst,rst),pred):
        pred(fst) && andmap(rst,pred)

// given a sequence and a value, return #true if the value is in the sequence
fun has_element(l,v):
  for values(accum = #false):
    each item: l
    break_when accum == #true
    accum || (item == v)

check has_element([4,3,6],3) ~is #true
check has_element([4,3,5],5) ~is #true
check has_element([4,3,5],6) ~is #false
check has_element("abcd",#{#\c}) ~is #true
check has_element("abcd",#{#\f}) ~is #false


// string->list
fun string_to_list(s :: ReadableString.to_string):
  for List (ch : s): ch

check string_to_list("abc") ~is [#{#\a},#{#\b},#{#\c}]

// given a string (or a Racket string-copy), return the reversed string
fun string_reverse(s :: ReadableString.to_string):
  base.string(& base.#{string->list}(s).reverse()).to_string()

fun flippy(in_progress,finished): List.cons(in_progress.reverse(),finished)
                                  
// given an iterable thing and a predicate, return a list of things such that
// joining them back together with elements satisfying the predicate can produce
// the eriginal list.
fun split_around(iterable,pred):
  def values(in_progress,finished):
    for values(in_progress=[], finished=[]):
      each item: iterable
      cond
      | pred(item): values([],flippy(in_progress,finished))
      | ~else: values(List.cons(item,in_progress),finished)
  flippy(in_progress,finished).reverse()

fun is_odd(x): (x mod 2) == 1
 
check split_around([4,19,8,3,7,22,4,18,9],is_odd) ~is [[4],[8],[],[22,4,18],[]]

// given a string, return a list of strings such that appending
// them all with `char` between each pair would produce the original
// string
fun char_split(char):
  fun (str :: ReadableString.to_string):
    split_around(str,fun (ch): ch==char).map(fun (loc):base.string(& loc))
  
def newline_split = char_split(#{#\newline})
def semicolon_split = char_split(#{#\;})
def comma_split = char_split(#{#\,})

check newline_split("abc\ndef") ~is_now ["abc","def"]
check newline_split("") ~is_now [""]
check newline_split("\nabc\ndef\n") ~is_now ["","abc","def",""]


// make sure it actually does short-cutting:
for red.Or:
  each i: [#false,#false,#false,3,#false,#false,9,#false]
  match i
  | 9: error("explode!")
  | ~else: i

// given a sequence and a key function, return a table
// that groups the elements of the sequence into sets,
// associated with their key value.
fun group_by(l :: Sequence,f):
  for values(table={}):
    each item: l
    def key = f(item)
    table ++ {key:(table.get(key,Set{}) ++ {item})}

fun m(x): x mod 10
          
check group_by([3,23,449,9,33,8],m) ~is {3:{3,23,33},9:{449,9},8:{8}}

// is the sequence empty?
fun empty(s :: Sequence):
  for values(empty=#true):
    each item: s
    final_when #true
    #false

check empty([]) ~is #true
check empty([1]) ~is #false
check empty("") ~is #true
check empty("a") ~is #false

fun last(s :: Sequence):
  def values(last_val,seen_one):
    for values(l=#false,seen_one=#false):
      each item: s
      values(item,#true)
  cond
  | seen_one: last_val
  | ~else: error("last","given empty_sequence")

check last("abc") ~is #{#\c}
check last([3,4,5]) ~is 5
