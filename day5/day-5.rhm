#lang rhombus


import:
  "../somelibs.rhm" as libs
  lib("racket/base.rkt"):
    rename #{regexp-match} as regexp_match
  lib("racket/file.rkt"):
    rename #{file->lines} as file_to_lines
  "../reducers.rhm" as red
  lib("racket/string.rkt")
  "../aoc_api.rhm"


fun tilde_v(x):
  base.format("~v",x)

def sample_string:
  #{"seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4
"}
  

def digits = "1234567890"                              
def non_symbols: "."++digits

operator (a >>> b):
  (fun (x):b(a(x)))

fun is_symbol(ch):
  !libs.has_element(non_symbols,ch)

fun is_digit(ch):
  libs.has_element("1234567890",ch)

fun is_star(ch :: Char):
  ch == #{#\*}
  
check is_symbol(#{#\3}) ~is #false
check is_symbol(#{#\@}) ~is #true
check is_digit(#{#\4}) ~is #true
check is_digit(#{#\.}) ~is #false

fun list_to_array(l :: List):
  Array(& l)

fun nonempty_string(s :: String): s != ""

// convert a string of space-separated integers to a list of integers
fun str_to_numlist(s :: ReadableString.to_string):
  base.#{regexp-split}(#{#px" +"},string.#{string-trim}(s)).map(String.to_string
                                                                  >>> String.to_int)


def lines = libs.newline_split(sample_string).map(String.to_string)

def seeds:
  match base.regexp_match(#{#px"^seeds: (.*)$"},lines[0])
  | [_, nums_str]: str_to_numlist(nums_str)

libs.filter(libs.split_around(lines.rest,fun (s): s==""), fun (l): l != [])


//libs.filter(,nonempty_string)

fun string_to_parsed_lines(s :: String):
  def lines = libs.filter(libs.newline_split(s).map(String.to_string),nonempty_string)
  
  for List (line: lines):
    match base.regexp_match(#{#px"^Card +([[:digit:]]+): ([^|]+)\\|([^|]+)$"},line)
    | [_,cardnum_str, winning_nums_str, guessed_nums_str]:
        [cardnum_str.to_string(), str_to_numlist(winning_nums_str), str_to_numlist(guessed_nums_str)]
    | other: error("parsed_lines","no match for line: "++tilde_v(line))

#//
fun go_1(s :: ReadableString.to_string):

  def parsed_lines = string_to_parsed_lines(s)
   
  for red.Sum ([n,wins,tries]: parsed_lines):
    match (libs.filter(tries, wins.has_element).length())
    | 0: 0
    | other: 2 ** (other - 1)

#//
go_1(aoc_api.retrieve_input_for_day(4))

#//
fun go_2(s :: ReadableString.to_string):

    def parsed_lines = string_to_parsed_lines(s)
    def a = Array.make(parsed_lines.length(),1)

    for:
      each:
        [n,wins,tries]: parsed_lines
        i : 0..
      def matches = libs.filter(tries, wins.has_element).length()
      def this_card_count = a[i]
      for (j: i+1..i+1+matches):
        a[j] := a[j] + this_card_count
    for red.Sum (item: a): item

#//
check go_2(sample_string) ~is 30

//go_2(aoc_api.retrieve_input_for_day(4))

/*
// actually let's just do this with a 2d array
fun string_to_char_array(s :: String):
  def lines = libs.newline_split(s).map(String.to_string)
  lines_to_char_array(lines)

fun lines_to_char_array(lines :: List):
  def lines2 = libs.filter(lines,fun (s :: String): s!="")
  list_to_array(lines2.map(list_to_array <<< base.#{string->list}))
  

def test_char_array = string_to_char_array(sample_string)

check string_to_char_array("ab\ncd\nef") ~is_now Array(Array(#{#\a},#{#\b}),
                                                       Array(#{#\c},#{#\d}),
                                                       Array(#{#\e},#{#\f}))

// scan a line for sequences of digits
fun find_nums(l :: String):
  def zipped:
    for List:
      each:
        ch: l
        i: 0..
      [ch,i]
  def digit_seqs:
    libs
      .filter(libs
                .split_around(zipped,fun ([ch,_]): !is_digit(ch)),(fun (l): l != []))
  for List (s: digit_seqs):
    [s[0][1],last(s)[1]+1]

check find_nums("..35..633.") ~is [[2,4],[6,9]]

// given a line number and a begin/end (e.g. [4,6] for chars 4 & 5), return
// #true if there's a symbol adjacent to a cell in the interval
fun scan_for_symbols(linenum,[begin,end],cell_array):
  //println("scanning on line: "++tilde_v(linenum))
  def linewidth = cell_array[0].length()
  def height = cell_array.length()
  fun legal_line(i):
    i >= 0 && i < height
  // checks whether j is valid, and the cell contains a symbol
  fun contains_symbol(i,j):
    j >= 0 && j < linewidth && is_symbol(cell_array[i][j])
  // return #true if there is a symbol in the given range
  fun range_check(row,mincol,maxcol):
    for red.Or:
      each j: mincol..maxcol
      contains_symbol(row,j)
  fun line_above_check():
    legal_line(linenum-1) && range_check(linenum-1,begin-1,end+1)
  fun left_right_check():
    legal_line(linenum)
      && (contains_symbol(linenum,begin-1) || contains_symbol(linenum,end))
  fun line_below_check():
    legal_line(linenum+1) && range_check(linenum+1,begin-1,end+1)
  ;; line_above_check
  (line_above_check()
     || left_right_check()
     || line_below_check())

block:
  def test_array = string_to_char_array("..@..")

  // below right, doesn't quite touch
  check scan_for_symbols(1,[4,5],test_array) ~is #false
  // now barely touches
  check scan_for_symbols(1,[3,5],test_array) ~is #true
  // move rect left gradually...
  check scan_for_symbols(1,[2,4],test_array) ~is #true
  check scan_for_symbols(1,[1,3],test_array) ~is #true
  check scan_for_symbols(1,[0,2],test_array) ~is #true
  check scan_for_symbols(1,[-1,1],test_array) ~is #false
  // middle row
  check scan_for_symbols(0,[4,6],test_array) ~is #false
  check scan_for_symbols(0,[3,5],test_array) ~is #true
  check scan_for_symbols(0,[2,4],test_array) ~is #false
  check scan_for_symbols(0,[1,3],test_array) ~is #false
  check scan_for_symbols(0,[0,2],test_array) ~is #true
  check scan_for_symbols(0,[-1,1],test_array) ~is #false
  // line_above_check
  check scan_for_symbols(-1,[4,6],test_array) ~is #false
  check scan_for_symbols(-1,[3,5],test_array) ~is #true
  check scan_for_symbols(-1,[2,4],test_array) ~is #true
  check scan_for_symbols(-1,[1,3],test_array) ~is #true
  check scan_for_symbols(-1,[0,2],test_array) ~is #true
  check scan_for_symbols(-1,[-1,1],test_array) ~is #false


// given a line number and a begin/end (e.g. [4,6] for chars 4 & 5), return
// a list of the locations of the adjacent stars
fun scan_for_stars(linenum,[begin,end],cell_array):
  def linewidth = cell_array[0].length()
  def height = cell_array.length()
  fun legal_line(i):
    i >= 0 && i < height
  // checks whether j is valid, and the cell contains a symbol
  fun star_pos(i,j):
    j >= 0 && j < linewidth && is_star(cell_array[i][j]) && [i,j]
  // return #true if there is a symbol in the given range
  fun range_check(row,mincol,maxcol):
    for red.FilterList:
      each j: mincol..maxcol
      star_pos(row,j)
  fun line_above_check():
    cond
    | legal_line(linenum-1): range_check(linenum-1,begin-1,end+1)
    | ~else: []
  fun left_right_check():
    cond
    | legal_line(linenum): for red.FilterList:
                             each [i,j]: [[linenum,begin-1],[linenum,end]]
                             star_pos(i,j)
    | ~else: []
  fun line_below_check():
    cond
    | legal_line(linenum+1): range_check(linenum+1,begin-1,end+1)
    | ~else: []
  ;; line_above_check
  (line_above_check()
     ++ left_right_check()
     ++ line_below_check())


  
block: */
// got to comment this line out in a different way:
//  def test_array = string_to_char_array("*.*/.")
/*
  // below right, doesn't quite touch
  check scan_for_stars(1,[4,6],test_array) ~is []
  // now barely touches
  check scan_for_stars(1,[3,5],test_array) ~is [[0,2]]
  // move rect left gradually...
  check scan_for_stars(1,[2,4],test_array) ~is [[0,2]]
  check scan_for_stars(1,[1,3],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(1,[0,2],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(1,[-1,1],test_array) ~is [[0,0]]
  // middle row
  check scan_for_stars(0,[4,6],test_array) ~is []
  check scan_for_stars(0,[3,5],test_array) ~is [[0,2]]
  check scan_for_stars(0,[2,4],test_array) ~is []
  check scan_for_stars(0,[1,3],test_array) ~is [[0,0]]
  check scan_for_stars(0,[0,2],test_array) ~is [[0,2]]
  check scan_for_stars(0,[-1,1],test_array) ~is []
  // line_above_check
  check scan_for_stars(-1,[4,6],test_array) ~is []
  check scan_for_stars(-1,[3,5],test_array) ~is [[0,2]]
  check scan_for_stars(-1,[2,4],test_array) ~is [[0,2]]
  check scan_for_stars(-1,[1,3],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(-1,[0,2],test_array) ~is [[0,0],[0,2]]
  check scan_for_stars(-1,[-1,1],test_array) ~is [[0,0]]

fun group_by(l,f):
  for values(table={}):
    each item: l
    table ++ {f(item):item}

// given lines and char_array, return a list of 3-tuples, where each
// one contains the line number and character range of a number and a
// 2-tuple containing the position of an adjacent star
fun nums_next_to_stars(lines, char_array):
  def line_star_pairs:
    for List:
      each:
        line: lines
        rowidx: 0..
      fun star_locs(range):
        scan_for_stars(rowidx, range, char_array)
      fun range_to_star_pairs(range):
        for List (pos: star_locs(range)):
          [rowidx,range,pos]
      def num_ranges = find_nums(line)
      List.append(& num_ranges.map(range_to_star_pairs))
  List.append(& line_star_pairs)

// given the num_star_pairs, group them by the location of the
// adjacent star, and for sets of length 2, multiply the 2 numbers together
fun gear_ratios(num_star_pairs,lines, char_array):
  fun extract_num(row,col_begin,col_end):
    lines[row].substring(col_begin, col_end).to_int()
  def set_sets = libs.group_by(num_star_pairs,fun ([_,_,x]): x)
  for red.Sum (possible_gear: set_sets.values()):
    match possible_gear.to_list()
    | [[i1, [j1b, j1e], _], [i2, [j2b, j2e], _]]:
        extract_num(i1,j1b,j1e) * extract_num(i2,j2b,j2e)
    | ~else: 0

block:
  def sample_lines = libs.newline_split(sample_string).map(String.to_string)
  def char_array = lines_to_char_array(sample_lines)
  def np = nums_next_to_stars(sample_lines, char_array)
  check gear_ratios(np,sample_lines, char_array) ~is 467835


fun run_puzzle(s :: String):
  def lines = libs.newline_split(s).map(String.to_string)

  def char_array = string_to_char_array(s)

  def nums_next_to_symbols:
    for List:
      each:
        line: lines
        rowidx: 0..
      def num_ranges = find_nums(line)
      fun check_num(range):
        scan_for_symbols(rowidx,range,char_array)
      def nums_next_to_symbols = libs.filter(num_ranges,check_num)
      for List ([b,e]: nums_next_to_symbols):
        line.substring(b,e).to_int()

  for red.Sum (line: nums_next_to_symbols):
    for red.Sum (n: line):
      n

run_puzzle(sample_string)

def input_string = file.#{file->string}("./input").to_string()

run_puzzle(input_string)

// part 2
block:
  def input_lines = libs.newline_split(input_string).map(String.to_string)
  def input_char_array = lines_to_char_array(input_lines)
  def np = nums_next_to_stars(input_lines, input_char_array)
  gear_ratios(np,input_lines, input_char_array)

*/