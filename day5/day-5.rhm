#lang rhombus

import:
  "../somelibs.rhm" as libs
  lib("racket/base.rkt"):
    rename #{regexp-match} as regexp_match
  lib("racket/file.rkt"):
    rename #{file->lines} as file_to_lines
  "../reducers.rhm" as red
  lib("racket/string.rkt")
  "../aoc_api.rhm"


fun tilde_v(x):
  base.format("~v",x)

def sample_string:
  #{"seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4
"}


// a submap is [Int,Int,Int] representing a remapping of a chunk of the
// natural number line. (Specifically chunk [a,b,c] means that the numbers
                                      // from b to b+c are remapped to the range from a to a+c)

// a map is Listof(submap) which is sorted by the second element

def digits = "1234567890"                              
def non_symbols: "."++digits

operator (a >>> b):
  (fun (x):b(a(x)))


/*
fun is_symbol(ch):
  !libs.has_element(non_symbols,ch)

fun is_digit(ch):
  libs.has_element("1234567890",ch)

fun is_star(ch :: Char):
  ch == #{#\*}
  
block:
  check is_symbol(#{#\3}) ~is #false
  check is_symbol(#{#\@}) ~is #true
  check is_digit(#{#\4}) ~is #true
  check is_digit(#{#\.}) ~is #false

fun list_to_array(l :: List):
  Array(& l)

*/

fun nonempty_string(s :: String): s != ""

// convert a string of space-separated integers to a list of integers
fun str_to_numlist(s :: ReadableString.to_string):
  base.#{regexp-split}(#{#px" +"},string.#{string-trim}(s)).map(String.to_string
                                                                  >>> String.to_int)

// does thsi triple apply to this input?
fun submap_matches([dest :: Int, src :: Int, len :: Int],input :: Int):
  (src <= input) && (input < src + len)

fun max(a,b):
  cond
  | a < b: b
  | ~else: a

fun min(a,b):
  cond
  | a < b: a
  | ~else: b

// given a triple and an interval, return the remapped intervals and the still-unmapped
// interval (or #false if none remains). Since we consider intervals from low to high,
// after we find an interval that misses high, we're all done
fun submap_remap([dest :: Int, src :: Int, len :: Int],[range_lo :: Int, range_hi :: Int]):
  cond
  | src >= range_hi:
      // total miss, it remaps to itself
      values([[range_lo,range_hi]],#false)
  | src + len > range_lo:
      def remap_begin = max(src,range_lo)
      def remap_end = min(src+len,range_hi)
      def remapped = [dest + (remap_begin - src),dest + (remap_end - src)]
      def leftover_bits = cond
      // a leftover to be mapped across
      | remap_begin > range_lo: [[range_lo,remap_begin]]
      | ~else: []
      def remaining = cond
      | remap_end < range_hi: [remap_end,range_hi]
      | ~else: #false
      values([remapped]++leftover_bits,remaining)
  | ~else:
      // total miss low, interval can still be remapped
      values([],[range_lo,range_hi])

block:
  def test_map = ["foo to bar map:",[18,2,2],[3,15,3]]
  check submap_remap([3,15,3],[20,25]) ~is values([],[20,25])
  check submap_remap([3,15,3],[18,23]) ~is values([],[18,23])
  check submap_remap([3,15,3],[17,22]) ~is values([[5,6]],[18,22])
  check submap_remap([3,15,3],[16,21]) ~is values([[4,6]],[18,21])
  check submap_remap([3,15,3],[15,20]) ~is values([[3,6]],[18,20])
  check submap_remap([3,15,3],[14,19]) ~is values([[3,6],[14,15]],[18,19])
  check submap_remap([3,15,3],[13,18]) ~is values([[3,6],[13,15]],#false)
  check submap_remap([3,15,3],[12,17]) ~is values([[3,5],[12,15]],#false)
  check submap_remap([3,15,3],[11,16]) ~is values([[3,4],[11,15]],#false)
  check submap_remap([3,15,3],[10,15]) ~is values([[10,15]],#false)
  check submap_remap([3,15,3],[9,14]) ~is values([[9,14]],#false)
  check submap_remap([3,15,3],[18,20]) ~is values([],[18,20])
  check submap_remap([3,15,3],[17,19]) ~is values([[5,6]],[18,19])
  check submap_remap([3,15,3],[16,18]) ~is values([[4,6]],#false)
  check submap_remap([3,15,3],[15,17]) ~is values([[3,5]],#false)
  check submap_remap([3,15,3],[14,16]) ~is values([[3,4],[14,15]],#false)
  check submap_remap([3,15,3],[13,15]) ~is values([[13,15]],#false)

// given a single aoc_map and an input, return 
fun apply_map(aoc_map :: List,input):
  match libs.findf(aoc_map.rest,fun (triple):submap_matches(triple,input))
  | #false: input
  | [dest,src,len]: dest + (input - src)

block:
  def test_map = ["foo to bar map:",[18,2,2],[3,15,3]]
  check apply_map(test_map,8) ~is 8
  check apply_map(test_map,15) ~is 3 
  check apply_map(test_map,17) ~is 5 
  check apply_map(test_map,18) ~is 18
  check apply_map(test_map,4) ~is 4
  check apply_map(test_map,3) ~is 19

// given an aoc_map and a range, return the remapped range
fun map_remap(aoc_map :: List, range):
  def values(final_remaining,remapped):
    for values(remaining = range,
               accum = []):
      each submap: aoc_map.rest
      break_when remaining == #false
      def values (remapped,still_remaining) = submap_remap(submap,remaining)
      values(still_remaining,remapped++accum)
  match final_remaining
  | #false: remapped
  | leftover: List.cons(leftover,remapped)

block:
  def test_map = ["foo to bar map:",[18,2,2],[3,15,3]]
  check map_remap(test_map,[0,20]) ~is [[18,20],[3,6],[4,15],[18,20],[0,2]]

fun map_remaps(aoc_map :: List, ranges):
  for values(accum = []):
    each range: ranges
    map_remap(aoc_map,range)++accum

// given a map_list and an input, return its target
fun apply_map_chain(aoc_map_list :: List.of(List),input :: Int):
  for values(accum=input):
    each aoc_map: aoc_map_list
    apply_map(aoc_map, accum)

// given a map_list and a list of ranges, return the list of remapped ranges
fun apply_map_chain_2(aoc_map_list :: List.of(List),inputs :: List.of(List)):
  for values(accum = inputs):
    each aoc_map: aoc_map_list
    map_remaps(aoc_map, accum)

fun string_to_lines(input_string :: ReadableString.to_string):
  libs.newline_split(input_string).map(String.to_string)

fun lines_to_seeds(lines):
  match base.regexp_match(#{#px"^seeds: (.*)$"},lines[0])
  | [_, nums_str]: str_to_numlist(nums_str)

fun slice_at(l,n):
  match l
  | [] : []
  | _ : cond
        | l.length() < n : error("lines_to_seeds","list length not divisible by n")
        | ~else : List.cons(libs.take(l,n),slice_at(libs.drop(l,n),n))

fun lines_to_seed_intervals(lines):
  match base.regexp_match(#{#px"^seeds: (.*)$"},lines[0])
  | [_, nums_str]: for List ([a,b]: slice_at(str_to_numlist(nums_str),2)):
                     [a,a+b]


// given a set of lines, return a map_chain
fun lines_to_map_chain(lines):  
  def unparsed_maps:
    libs.filter(libs.split_around(lines.rest,fun (s): s==""), fun (l): l != [])
  for List (m : unparsed_maps):
    def unsorted_chain = m.rest.map(str_to_numlist)
    def sorted_chain = unsorted_chain.sort(fun ([_,s1,_],[_,s2,_]) : s1 < s2)
    List.cons(m[0],sorted_chain)


fun find_best_seed(aoc_map_chain, seeds):
  fun run(seed): apply_map_chain(aoc_map_chain,seed)
  def values(best_seed, lowest_location):
    for values(best_seed = seeds.first, lowest_location = run(seeds.first)):
      each seed: seeds.rest
      def new_location = run(seed)
      cond
      | new_location < lowest_location: values(seed,new_location)
      | ~else: values(best_seed, lowest_location)
  [best_seed, lowest_location]

block:
  def lines = string_to_lines(sample_string)
  def seeds = lines_to_seeds(lines)
  def aoc_map_chain = lines_to_map_chain(lines)


  check apply_map_chain(libs.take(aoc_map_chain,1),79) ~is 81
  check apply_map_chain(libs.take(aoc_map_chain,2),79) ~is 81
  check apply_map_chain(libs.take(aoc_map_chain,3),79) ~is 81
  check apply_map_chain(libs.take(aoc_map_chain,4),79) ~is 74
  check apply_map_chain(aoc_map_chain,79) ~is 82
  check find_best_seed(aoc_map_chain,seeds) ~is [13,35]

  def seed_intervals = lines_to_seed_intervals(lines)

  check seed_intervals ~is [[79,79+14],[55,55+13]]
#//
  check apply_map_chain(libs.take(aoc_map_chain,1),
                        seed_intervals
                        ) ~is 
  apply_map_chain_2(aoc_map_chain,seed_intervals).sort(fun([a,b],[c,d]): a < c)

//libs.filter(,nonempty_string)

def lines = string_to_lines(aoc_api.retrieve_input_for_day(5))
def seeds = lines_to_seeds(lines)
def aoc_map_chain = lines_to_map_chain(lines)
find_best_seed(aoc_map_chain,seeds)

def seed_intervals = lines_to_seed_intervals(lines)
apply_map_chain_2(aoc_map_chain,seed_intervals).sort(fun([a,b],[c,d]): a < c)



//go_2(aoc_api.retrieve_input_for_day(4))

